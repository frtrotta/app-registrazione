<?php

namespace modules\paypal;

class ipnListener {

    protected $postData;
    protected $receiver_email;
    protected $tnx_type;
    protected $tnx_id;

    public function __construct($receiver_email) {
        if (!isset($receiver_email)) {
            throw new ipnListenerException('$receiverEmail must be set', 10);
        }
        $this->receiver_email = $receiver_email;

        // Reading POSTed data directly from $_POST causes serialization issues with array data in the POST.
        // Instead, read raw POST data from the input stream.
        $raw_post_data = file_get_contents('php://input');
        $raw_post_array = explode('&', $raw_post_data);

        $this->postData = array();
        foreach ($raw_post_array as $keyval) {
            $keyval = explode('=', $keyval);
            if (count($keyval) == 2) {
                $this->postData[$keyval[0]] = urldecode($keyval[1]);
            }
        }
    }

    public function currentIpnIsValid() {
        $r = false;
        $ipnVAlidationUrl = null;
        $requestBody = 'cmd=_notify-validate&' . $raw_post_data = file_get_contents('php://input');
        if (strpos($requestBody, 'test_ipn=1') === false) {
            $ipnVAlidationUrl = 'https://www.paypal.com/cgi-bin/webscr';
        } else {
            // Generated by IPN simulator https://developer.paypal.com/developer/ipnSimulator/
            $ipnVAlidationUrl = 'https://www.sandbox.paypal.com/cgi-bin/webscr';
        }

        $ch = curl_init($ipnVAlidationUrl);
        curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $requestBody);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);
        curl_setopt($ch, CURLOPT_FORBID_REUSE, 1);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Connection: Close'));
        // In wamp-like environments that do not come bundled with root authority certificates,
        // please download 'cacert.pem' from "http://curl.haxx.se/docs/caextract.html" and set
        // the directory path of the certificate as shown below:
        // curl_setopt($ch, CURLOPT_CAINFO, dirname(__FILE__) . '/cacert.pem');
        $res = curl_exec($ch);
        if ($res) {
            switch ($res) {
                case 'VERIFIED':
                    $r = true;
                    break;
                case 'INVALID':
                    break;
                default:
                    throw new ipnListenerException('Unexpected result: ' . $res, 1);
            }
        } else {
            throw new ipnListenerException('Unsuccesful requesto to ' . $ipnVAlidationUrl . '. Got error: ' . curl_error($ch), 2);
        }
        curl_close($ch);
        return $r;
    }

    public function currentIpnIsCompleted() {
        // Operation summary (https://developer.paypal.com/webapps/developer/docs/classic/ipn/integration-guide/IPNIntro/)
        //1) Check that the payment_status is Completed.
        //2) If the payment_status is Completed, check the txn_id against the previous PayPal transaction that you processed to ensure the IPN message is not a duplicate.
        //3) Check that the receiver_email is an email address registered in your PayPal account.
        //4) Check that the price (carried in mc_gross) and the currency (carried in mc_currency) are correct for the item (carried in item_name or item_number).
        //--------------------------------------------------------------------------------------
        
        //--------------------------------------------------------------------------------------
        //1) Check that the payment_status is Completed.
        if (!isset($this->postData['payment_status'])) {
            throw new ipnListenerException('payment_status is not set', 20);
        }

        if ($this->postData['payment_status'] !== 'Completed') {
            throw new ipnListenerException('unexpected payment_status: ' . $this->postData['payment_status'], 21);
        }

        //--------------------------------------------------------------------------------------
        //3) Check that the receiver_email is an email address registered in your PayPal account.
        if (!isset($this->postData['receiver_email'])) {
            throw new ipnListenerException('receiver_email is not set', 22);
        }

        if ($this->postData['receiver_email'] !== $this->receiver_email) {
            throw new ipnListenerException('Unexpected receiver_email: ' . $this->postData['receiver_email'], 23);
        }
        
        if (!isset($this->postData['txn_type'])) {
            throw new ipnListenerException('txn_type is not set', 24);
        }
        $this->tnx_type = $this->postData['txn_type'];
        
        if (!isset($this->postData['txn_id'])) {
            throw new ipnListenerException('txn_id is not set', 25);
        }
        $this->tnx_id = $this->postData['txn_id'];
        
        switch($this->tnx_type) {
            case 'cart':
                // TODO Quale design pattern usare, per verificare unicitÃ  della transazione?
                // TODO QUale design pattern usare, per verificare rispondenza con divisa e totale?
                break;
            default:
                throw new ipnListenerException('Unexpected tnx_type: ' . $this->tnx_type, 100);
        }
    }

    function pippo() {



        //--------------------------------------------------------------------------------------
        //2) If the payment_status is Completed, check the txn_id against the previous PayPal transaction that you processed to ensure the IPN message is not a duplicate
        
        // TODO check for unicity
        //--------------------------------------------------------------------------------------
        //4-preliminar) Get the order data
        if (!isset($this->postData['custom'])) {
            // TODO
        }
        $idOrdine = $this->postData['custom'] + 0;

        //--------------------------------------------------------------------------------------
        //4) Check that the price (carried in mc_gross) and the currency (carried in mc_currency) are correct for the item (carried in item_name or item_number).
        if (!isset($this->postData['mc_gross'])) {
            // TODO
        }
        if (!isset($this->postData['mc_currency'])) {
            // TODO
        }
        if ($this->postData['mc_currency'] != 'EUR') {
            // TODO
        }
        $orderTotal = $this->postData['mc_gross'] + 0;
        if ($orderTotal !== $totale) {
            // TODO
        }
    }

}
